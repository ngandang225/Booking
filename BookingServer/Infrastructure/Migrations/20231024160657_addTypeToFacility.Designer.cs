// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(CoreContext))]
    [Migration("20231024160657_addTypeToFacility")]
    partial class addTypeToFacility
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.EntityModels.AccessPropertyModel.AccessProperty", b =>
                {
                    b.Property<int>("Property_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Property_Id", "User_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("AccessProperties", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.FacilityModel.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Name")
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .UseCollation("LATIN1_GENERAL_100_CI_AS_SC_UTF8");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facilities", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.GeographycalPlaceModel.GeographycalPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Center_Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .UseCollation("LATIN1_GENERAL_100_CI_AS_SC_UTF8");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.ToTable("GeographycalPlaces", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.NeighborhoodModel.Neighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GeograhycalPlace_Id")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .UseCollation("LATIN1_GENERAL_100_CI_AS_SC_UTF8");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("GeograhycalPlace_Id");

                    b.ToTable("Neighborhoods", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.NeighborhoodPropertyModel.NeighborhoodProperty", b =>
                {
                    b.Property<int>("Neighborhood_Id")
                        .HasColumnType("int");

                    b.Property<int>("Property_Id")
                        .HasColumnType("int");

                    b.HasKey("Neighborhood_Id", "Property_Id");

                    b.HasIndex("Property_Id");

                    b.ToTable("NeighborhoodsProperties", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.OrderItemModel.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Order_Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<int?>("Room_Id")
                        .HasColumnType("int");

                    b.Property<int?>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Order_Id");

                    b.HasIndex("Room_Id");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.OrderModel.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Check_In_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Check_Out_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Customer_Name")
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .UseCollation("LATIN1_GENERAL_100_CI_AS_SC_UTF8");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Order_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .UseCollation("LATIN1_GENERAL_100_CI_AS_SC_UTF8");

                    b.Property<int?>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.PriceListModel.PriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Close_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Open_Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Room_Id")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(15)");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Room_Id");

                    b.ToTable("PriceLists", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.PropertyFacilityModel.PropertyFacility", b =>
                {
                    b.Property<int>("Facility_Id")
                        .HasColumnType("int");

                    b.Property<int>("Property_Id")
                        .HasColumnType("int");

                    b.HasKey("Facility_Id", "Property_Id");

                    b.HasIndex("Property_Id");

                    b.ToTable("PropertyFacilities", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.PropertyModel.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Geographycal_Id")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .UseCollation("LATIN1_GENERAL_100_CI_AS_SC_UTF8");

                    b.Property<int?>("Owner_Id")
                        .HasColumnType("int");

                    b.Property<string>("Policy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Geographycal_Id");

                    b.HasIndex("Owner_Id");

                    b.HasIndex("Type_Id");

                    b.ToTable("Properties", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.PropertyTypeModel.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .UseCollation("LATIN1_GENERAL_100_CI_AS_SC_UTF8");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.ReviewModel.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Room_Id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("User_Id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Room_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.RoleModel.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .UseCollation("LATIN1_GENERAL_100_CI_AS_SC_UTF8");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.RoomFacilityModel.RoomFacility", b =>
                {
                    b.Property<int>("Facility_Id")
                        .HasColumnType("int");

                    b.Property<int>("Room_Id")
                        .HasColumnType("int");

                    b.HasKey("Facility_Id", "Room_Id");

                    b.HasIndex("Room_Id");

                    b.ToTable("RoomFacilities", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.RoomModel.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Area")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Double_Bed")
                        .HasColumnType("int");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<int?>("Property_Id")
                        .HasColumnType("int");

                    b.Property<float?>("ReviewScore")
                        .HasColumnType("real");

                    b.Property<int?>("Room_Number")
                        .HasColumnType("int");

                    b.Property<int?>("Single_Bed")
                        .HasColumnType("int");

                    b.Property<int?>("Type_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Property_Id");

                    b.HasIndex("Type_Id");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.RoomTypeModel.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .UseCollation("LATIN1_GENERAL_100_CI_AS_SC_UTF8");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.UserModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Gender")
                        .IsUnicode(true)
                        .HasColumnType("varchar(5)")
                        .UseCollation("LATIN1_GENERAL_100_CI_AS_SC_UTF8");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Role_id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Role_id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.VoucherModel.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Close_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .UseCollation("LATIN1_GENERAL_100_CI_AS_SC_UTF8");

                    b.Property<DateTime?>("Open_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Percentage")
                        .HasColumnType("int");

                    b.Property<int?>("Scope")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Scope");

                    b.ToTable("Vouchers", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EntityModels.AccessPropertyModel.AccessProperty", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.PropertyModel.Property", null)
                        .WithMany()
                        .HasForeignKey("Property_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.EntityModels.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.EntityModels.NeighborhoodModel.Neighborhood", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.GeographycalPlaceModel.GeographycalPlace", "GeographycalPlace")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("GeograhycalPlace_Id");

                    b.Navigation("GeographycalPlace");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.NeighborhoodPropertyModel.NeighborhoodProperty", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.NeighborhoodModel.Neighborhood", null)
                        .WithMany()
                        .HasForeignKey("Neighborhood_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.EntityModels.PropertyModel.Property", null)
                        .WithMany()
                        .HasForeignKey("Property_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.EntityModels.OrderItemModel.OrderItem", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.OrderModel.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("Order_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Infrastructure.EntityModels.RoomModel.Room", "Room")
                        .WithMany("OrderItems")
                        .HasForeignKey("Room_Id");

                    b.Navigation("Order");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.OrderModel.Order", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.UserModel.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("User_Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.PriceListModel.PriceList", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.RoomModel.Room", "Room")
                        .WithMany("PriceLists")
                        .HasForeignKey("Room_Id");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.PropertyFacilityModel.PropertyFacility", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.FacilityModel.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("Facility_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.EntityModels.PropertyModel.Property", "Property")
                        .WithMany()
                        .HasForeignKey("Property_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.PropertyModel.Property", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.GeographycalPlaceModel.GeographycalPlace", "GeographycalPlace")
                        .WithMany("Properties")
                        .HasForeignKey("Geographycal_Id");

                    b.HasOne("Infrastructure.EntityModels.UserModel.User", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("Owner_Id");

                    b.HasOne("Infrastructure.EntityModels.PropertyTypeModel.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("Type_Id");

                    b.Navigation("GeographycalPlace");

                    b.Navigation("Owner");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.ReviewModel.Review", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.RoomModel.Room", "Room")
                        .WithMany("Reviews")
                        .HasForeignKey("Room_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.EntityModels.UserModel.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.RoomFacilityModel.RoomFacility", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.FacilityModel.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("Facility_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.EntityModels.RoomModel.Room", "Room")
                        .WithMany()
                        .HasForeignKey("Room_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.RoomModel.Room", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.PropertyModel.Property", "Property")
                        .WithMany("Rooms")
                        .HasForeignKey("Property_Id");

                    b.HasOne("Infrastructure.EntityModels.RoomTypeModel.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("Type_Id");

                    b.Navigation("Property");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.UserModel.User", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.RoleModel.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.VoucherModel.Voucher", b =>
                {
                    b.HasOne("Infrastructure.EntityModels.PropertyModel.Property", "Property")
                        .WithMany("Vouchers")
                        .HasForeignKey("Scope");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.GeographycalPlaceModel.GeographycalPlace", b =>
                {
                    b.Navigation("Neighborhoods");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.OrderModel.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.PropertyModel.Property", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.PropertyTypeModel.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.RoleModel.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.RoomModel.Room", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("PriceLists");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.RoomTypeModel.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Infrastructure.EntityModels.UserModel.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Properties");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
